import Web3 from 'web3';

const web3 = new Web3();

// The raw RPC response (cut for readability)
const rawResponse =
	'0x00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000092000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000065842007000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020000000000000000000000003ee18b2214aff97000d974cf647e7c347e8fa585000000000000000000000000000000000000000000000000000000000002814a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000220cc5e822d7526e2888f1d0bc24ca6d4306c4f23305f78b72b6f8aac8a4232eefb000000000000000000000000000000000000000000000000000000000000008501000000000000000000000000000000000000000000000000000012a9cff88af600000000000000000000000018aaa7115705e8be94bffebde57af9bfc265b998000224ed9849acc336ae6f829b25702ba7df978a93f4fddfe65efb62472bec37a1f600010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d0019447b72d51e33923a3d6b28496ccd3722d5f1e33e2ce58c06f8c92085647b240ebd98323b37412e8cbf495815994b1bd8e02affc6b21b95ebfe56039c8d95000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000018dc54ef781c7360c906bff9f99a5b087ab06020c944dce4af36ef54930de5d276e31b5ae03f63ef3062ca24a81967aa7b2b08cc232e675a8d6f833e987412906000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000002e6b80a471028b4079759a7eb0816a08dc8eecb517a19bd626e69ee04d233efe75b1f598acbe8abf227fbb27e2d4e03a518065102bbee9b2d303e91e6814ff713000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000030af28ffc7516be2570ed5a5ac47f0cfb0e7e05b992a8a0e3690be0edae2f7d1f546efb9bbe7dd2ebc777075972dab5e82887d690a2c3d609fc10a1607f90fe04000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000004ca0b162c51641ace1a42893c064d7987e43940589a47172b02df4b7caf7a45b50cd8f2ca5ccb03c1daf32530a73f41e2c993dc2e74a1eb839547fa3b33861eca000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000069c37f65d93b05eef5b09cefacabfaab867ec2694f406e3c1446561bd10f9ad8113942544156348472f83411c0cb43ee7f17fed238bb2ac5e8e7c05ca34693893000000000000000000000000000000000000000000000000000000000000001b00000000000000000000000000000000000000000000000000000000000000072d10021930d37284dd0b27e1aece127d014c62ab04626f01d2a35a3009b3dc9b2c78ef8b75be51df294b1e742638c5a411e48e5aac4b861a34f3386e885979fa000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000a32bc140fdbc3bff8b70446c45118c92b1d2f28cc829ada2d68bbf60d3a880f2561b7be14a0d4f4ee04efeb92dd80603a22d8a51b9994a7c7ad57cd596725016d000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000000c21f2015599c1c976f71a484f52a6b33cdddf976e6eb842cffba072c8675e4f79785462477b559777afcd837d6ae31be7243a3538d244aa7a42fb5ed4b4dcb0c8000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000000ed7ec88d9a1c4670339f9fa8b263057a476f8f0be0aa23a496d146dc58766fc1d22004b33d9ed00bb7aa3c10ef29fb919da6caa83dc9e7c17122a16a5c8198560000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000000f12a4f50e1ab9ce1de700c896fe7439e7554a235a8f49258efc44334a13115237610a666a1e01736649f869937dcdbdcc7e99393321df0006bcf477c3cbfc87c7000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001028e37bf50c72714af0b22c25772bb06669ae5d20db0e06d40f4973da843184a40a0600ea2fbef7dd657d662e0fa1523029a354c079046b24494184e5c32350dd000000000000000000000000000000000000000000000000000000000000001b0000000000000000000000000000000000000000000000000000000000000011e5f17f6a631c46385c502474029acccf5e426024dc24a70786fbbd80565dfd3b4dbca07c04839102c89bef2f90c618716824d92cf0668a8c9a6c5b580a206bee000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000';

// Define the expected output format from the `parseAndVerifyVM` function
const outputTypes = [
	{
		type: 'tuple',
		components: [
			{ type: 'uint8', name: 'version' },
			{ type: 'uint32', name: 'timestamp' },
			{ type: 'uint32', name: 'nonce' },
			{ type: 'uint16', name: 'emitterChainId' },
			{ type: 'bytes32', name: 'emitterAddress' },
			{ type: 'uint64', name: 'sequence' },
			{ type: 'uint8', name: 'consistencyLevel' },
			{ type: 'bytes', name: 'payload' },
			{ type: 'uint32', name: 'guardianSetIndex' },
			{
				type: 'tuple[]',
				name: 'signatures',
				components: [
					{ type: 'bytes32', name: 'r' },
					{ type: 'bytes32', name: 's' },
					{ type: 'uint8', name: 'v' },
					{ type: 'uint8', name: 'guardianIndex' },
				],
			},
			{ type: 'bytes32', name: 'hash' },
		],
	},
	{ type: 'bool', name: 'valid' },
	{ type: 'string', name: 'reason' },
];

// Decode the response
const decoded = web3.eth.abi.decodeParameters(outputTypes, rawResponse);

console.log('‚úÖ Decoded Response:', decoded);
console.log('üîç Verification Result:', decoded.valid);
console.log('‚ö†Ô∏è Reason for failure:', decoded.reason);
